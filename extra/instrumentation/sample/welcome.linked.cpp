// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("welcome.linked.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 20);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 12);
 
 PointerType* PointerTy_4 = PointerType::get(ArrayTy_3, 0);
 
 std::vector<Type*>FuncTy_5_args;
 FunctionType* FuncTy_5 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_5_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_8_args;
 FuncTy_8_args.push_back(PointerTy_6);
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_7 = PointerType::get(FuncTy_8, 0);
 
 std::vector<Type*>FuncTy_9_args;
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 Function* func__Z6samplev = mod->getFunction("_Z6samplev");
 if (!func__Z6samplev) {
 func__Z6samplev = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z6samplev", mod); 
 func__Z6samplev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z6samplev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z6samplev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z6samplev->setAttributes(func__Z6samplev_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_int32_count = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 32),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"count");
 gvar_int32_count->setAlignment(4);
 
 GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_3,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str1");
 gvar_array__str1->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_10 = ConstantDataArray::getString(mod->getContext(), "Welcome to CSE231!\x0A", true);
 ConstantInt* const_int32_11 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 Constant *const_array_12 = ConstantDataArray::getString(mod->getContext(), "Count = %d\x0A", true);
 ConstantInt* const_int32_13 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 std::vector<Constant*> const_ptr_14_indices;
 const_ptr_14_indices.push_back(const_int32_11);
 const_ptr_14_indices.push_back(const_int32_11);
 Constant* const_ptr_14 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_14_indices);
 std::vector<Constant*> const_ptr_15_indices;
 const_ptr_15_indices.push_back(const_int32_11);
 const_ptr_15_indices.push_back(const_int32_11);
 Constant* const_ptr_15 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_15_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_10);
 gvar_int32_count->setInitializer(const_int32_11);
 gvar_array__str1->setInitializer(const_array_12);
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  ptr_retval->setAlignment(4);
  StoreInst* void_16 = new StoreInst(const_int32_11, ptr_retval, false, label_entry);
  CallInst* int32_call = CallInst::Create(func_printf, const_ptr_14, "call", label_entry);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttributeSet int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_11, label_entry);
  
 }
 
 // Function: _Z6samplev (func__Z6samplev)
 {
  
  BasicBlock* label_entry_18 = BasicBlock::Create(mod->getContext(), "entry",func__Z6samplev,0);
  
  // Block entry (label_entry_18)
  LoadInst* int32_19 = new LoadInst(gvar_int32_count, "", false, label_entry_18);
  int32_19->setAlignment(4);
  std::vector<Value*> int32_call_20_params;
  int32_call_20_params.push_back(const_ptr_15);
  int32_call_20_params.push_back(int32_19);
  CallInst* int32_call_20 = CallInst::Create(func_printf, int32_call_20_params, "call", label_entry_18);
  int32_call_20->setCallingConv(CallingConv::C);
  int32_call_20->setTailCall(false);
  AttributeSet int32_call_20_PAL;
  int32_call_20->setAttributes(int32_call_20_PAL);
  
  LoadInst* int32_21 = new LoadInst(gvar_int32_count, "", false, label_entry_18);
  int32_21->setAlignment(4);
  BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_21, const_int32_13, "inc", label_entry_18);
  StoreInst* void_22 = new StoreInst(int32_inc, gvar_int32_count, false, label_entry_18);
  void_22->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_entry_18);
  
 }
 
 return mod;
}
